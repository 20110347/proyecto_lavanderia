generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id_user        Int              @id @default(autoincrement())
  name           String
  email          String           @unique
  phone          String           @unique
  pass           String
  role           Role             @default(employee)
  created        DateTime         @default(now())
  firstLN        String
  secondLN       String
  username       String           @unique
  updatedAt      DateTime         @updatedAt
  CashCut        CashCut[]
  CashWithdrawal CashWithdrawal[]
  DeliveryDetail DeliveryDetail[]
  ServiceOrders  ServiceOrder[]
  PettyCash      PettyCash[]
}

model Client {
  id_client     Int            @id @default(autoincrement())
  name          String
  email         String         @unique
  phone         String         
  pass          String?
  created       DateTime       @default(now())
  firstLN       String
  secondLN      String?
  username      String?        @unique
  updatedAt     DateTime       @updatedAt
  ServiceOrders ServiceOrder[]
}

model Machine {
  id_machine   Int         @id @default(autoincrement())
  machineType  MachineType @default(lavadora)
  model        String
  cicleTime    Int
  weight       Int
  status       Status      @default(available)
  freeForUse   Boolean     @default(true)
  notes        String
  created      DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  serialNumber String      @default("N/A")

  SelfServiceQueue SelfServiceQueue[]
}

model IronStation {
  id_ironStation Int         @id @default(autoincrement())
  machineType    MachineType @default(plancha)
  freeForUse     Boolean     @default(true)
  status         Status      @default(available)
  pieces         Int?
  notes          String
  serialNumber   String      @default("N/A")

  created   DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  IronQueue IronQueue[]
}

model Category {
  id_category         Int            @id @default(autoincrement())
  categoryDescription String         @unique
  serviceOrders       ServiceOrder[]

  LaundryService LaundryService[]
  SelfService    SelfService[]
  IronService    IronService[]
}

model IronService {
  id_service         Int                  @id @default(autoincrement())
  machineType        MachineType          @default(plancha)
  description        String               @unique
  price              Float
  pieces             Int
  cycleTime          Int
  token_id           Int?
  category_id        Int
  Category           Category             @relation(fields: [category_id], references: [id_category], onUpdate: Cascade, onDelete: Cascade)
  ServiceOrderDetail ServiceOrderDetail[]
  IronQueue          IronQueue[]
}

model SelfService {
  id_service         Int                  @id @default(autoincrement())
  description        String               @unique
  price              Float
  weight             Int
  cycleTime          Int
  machineType        MachineType
  created            DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  category_id        Int
  Category           Category             @relation(fields: [category_id], references: [id_category], onUpdate: Cascade, onDelete: Cascade)
  ServiceOrderDetail ServiceOrderDetail[]
  SelfServiceQueue   SelfServiceQueue[]
}

model LaundryService {
  id_service         Int                  @id @default(autoincrement())
  description        String               @unique
  price              Float
  washWeight         Int
  washCycleTime      Int
  dryWeight          Int
  dryCycleTime       Int
  created            DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  category_id        Int
  Category           Category             @relation(fields: [category_id], references: [id_category], onUpdate: Cascade, onDelete: Cascade)
  ServiceOrderDetail ServiceOrderDetail[]
  LaundryQueue       LaundryQueue[]
}

model ServiceOrder {
  id_order              Int                  @id @default(autoincrement())
  receptionDate         DateTime             @db.Date
  orderStatus           OrderStatus          @default(pending)
  totalPrice            Float
  fk_client             Int
  created               DateTime             @default(now())
  numberOfItems         Int                  @default(1)
  payForm               PayForm              @default(delivery)
  payStatus             PayStatus            @default(unpaid)
  receptionTime         DateTime             @db.Time(0)
  updatedAt             DateTime             @updatedAt
  fk_user               Int
  scheduledDeliveryDate DateTime             @db.Date
  scheduledDeliveryTime DateTime?            @db.Time(0)
  fk_categoryId         Int
  fk_deliveryDetail     Int?
  category              Category             @relation(fields: [fk_categoryId], references: [id_category], onDelete: Cascade, onUpdate: Cascade)
  client                Client               @relation(fields: [fk_client], references: [id_client], onDelete: Cascade, onUpdate: Cascade)
  user                  User                 @relation(fields: [fk_user], references: [id_user], onDelete: Cascade, onUpdate: Cascade)
  deliveryDetail        DeliveryDetail?
  payment               Payment?
  ServiceOrderDetail    ServiceOrderDetail[]
  LaundryQueue          LaundryQueue[]
  SelfServiceQueue      SelfServiceQueue[]
  IronQueue             IronQueue[]
}

model ServiceOrderDetail {
  id_serviceOrderDetail Int      @id @default(autoincrement())
  units                 Int      @default(1)
  subtotal              Float    @default(0.00)
  created               DateTime @default(now())
  updatedAt             DateTime @updatedAt
  fk_serviceOrder       Int
  fk_laundryService     Int?
  fk_selfService        Int?
  fk_ironService        Int?

  serviceOrder   ServiceOrder    @relation(fields: [fk_serviceOrder], references: [id_order], onDelete: Cascade, onUpdate: Cascade)
  LaundryService LaundryService? @relation(fields: [fk_laundryService], references: [id_service])
  SelfService    SelfService?    @relation(fields: [fk_selfService], references: [id_service])
  IronService    IronService?    @relation(fields: [fk_ironService], references: [id_service])
}

model LaundryQueue {
  id_laundryEvent   Int           @id @default(autoincrement())
  id_description    String?
  fk_laundryService Int?
  fk_idServiceOrder Int
  fk_washDetail     Int?
  fk_dryDetail      Int?
  token_id          Int?
  serviceStatus     ServiceStatus @default(pending)

  serviceOrder   ServiceOrder    @relation(fields: [fk_idServiceOrder], references: [id_order], onDelete: Cascade, onUpdate: Cascade)
  LaundryService LaundryService? @relation(fields: [fk_laundryService], references: [id_service], onDelete: SetNull, onUpdate: Cascade)
  WashDetail     WashDetail?
  DryDetail      DryDetail?
}

model WashDetail {
  id_washDetail    Int  @id @default(autoincrement())
  fk_idWashMachine Int?
  fk_idStaffMember Int?
  fk_laundryEvent  Int? @unique

  LaundryQueue LaundryQueue? @relation(fields: [fk_laundryEvent], references: [id_laundryEvent], onDelete: SetNull, onUpdate: Cascade)
  StaffMember  StaffMember?  @relation(fields: [fk_idStaffMember], references: [id_staffMember], onDelete: Cascade, onUpdate: Cascade)
}

model DryDetail {
  id_dryDetail     Int  @id @default(autoincrement())
  fk_idDryMachine  Int?
  fk_idStaffMember Int?
  fk_laundryEvent  Int? @unique

  LaundryQueue LaundryQueue? @relation(fields: [fk_laundryEvent], references: [id_laundryEvent], onDelete: SetNull, onUpdate: Cascade)
  StaffMember  StaffMember?  @relation(fields: [fk_idStaffMember], references: [id_staffMember], onDelete: Cascade, onUpdate: Cascade)
}

model SelfServiceQueue {
  id_serviceEvent   Int           @id @default(autoincrement())
  id_description    String?
  fk_idServiceOrder Int
  fk_selfService    Int?
  fk_idMachine      Int?
  token_id          Int?
  serviceStatus     ServiceStatus @default(pending)

  machine      Machine?     @relation(fields: [fk_idMachine], references: [id_machine], onDelete: Cascade, onUpdate: Cascade)
  serviceOrder ServiceOrder @relation(fields: [fk_idServiceOrder], references: [id_order], onDelete: Cascade, onUpdate: Cascade)
  SelfService  SelfService? @relation(fields: [fk_selfService], references: [id_service], onDelete: SetNull, onUpdate: Cascade)
}

model IronQueue {
  id_ironEvent      Int           @id @default(autoincrement())
  id_description    String?
  fk_idIronService  Int
  fk_idServiceOrder Int
  fk_idStaffMember  Int?
  fk_idIronStation  Int?
  token_id          Int?
  serviceStatus     ServiceStatus @default(pending)

  ironStation  IronStation? @relation(fields: [fk_idIronStation], references: [id_ironStation], onDelete: Cascade, onUpdate: Cascade)
  serviceOrder ServiceOrder @relation(fields: [fk_idServiceOrder], references: [id_order], onDelete: Cascade, onUpdate: Cascade)
  staffMember  StaffMember? @relation(fields: [fk_idStaffMember], references: [id_staffMember], onDelete: Cascade, onUpdate: Cascade)
  ironService  IronService  @relation(fields: [fk_idIronService], references: [id_service], onDelete: Cascade, onUpdate: Cascade)
}

model Payment {
  id_payment   Int             @id @default(autoincrement())
  fk_idOrder   Int             @unique
  payMethod    PayMethod
  payDate      DateTime        @db.Date
  created      DateTime        @default(now())
  fk_cashCut   Int
  payTime      DateTime        @db.Time(0)
  payTotal     Float
  updatedAt    DateTime        @updatedAt
  delivery     DeliveryDetail?
  cashCut      CashCut         @relation(fields: [fk_cashCut], references: [id_cashCut], onDelete: Cascade, onUpdate: Cascade)
  serviceOrder ServiceOrder    @relation(fields: [fk_idOrder], references: [id_order], onDelete: Cascade, onUpdate: Cascade)
}

model DeliveryDetail {
  id_delivery    Int          @id @default(autoincrement())
  fk_userCashier Int
  created        DateTime     @default(now())
  deliveryDate   DateTime     @db.Date
  deliveryTime   DateTime     @db.Time(0)
  updatedAt      DateTime     @updatedAt
  fk_idOrder     Int          @unique
  fk_idPayment   Int          @unique
  payment        Payment      @relation(fields: [fk_idPayment], references: [id_payment], onDelete: Cascade, onUpdate: Cascade)
  user           User         @relation(fields: [fk_userCashier], references: [id_user], onDelete: Cascade, onUpdate: Cascade)
  serviceOrder   ServiceOrder @relation(fields: [fk_idOrder], references: [id_order])
}

model StaffMember {
  id_staffMember Int      @id @default(autoincrement())
  name           String
  email          String   @unique
  phone          String   @unique
  created        DateTime @default(now())
  updatedAt      DateTime @updatedAt
  firstLN        String
  id_Token       Int?
  secondLN       String

  IronQueue  IronQueue[]
  WashDetail WashDetail[]
  DryDetail  DryDetail[]
}

model CashCut {
  fk_user             Int
  total               Float?
  created             DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  cashCutD            DateTime?        @db.Date
  cashCutT            DateTime?        @db.Time(0)
  id_cashCut          Int              @id @default(autoincrement())
  cashCutStatus       CashCutStatus    @default(open)
  initialCash         Float?           @default(0)
  ordersPayed         Int?
  totalAutoservicio   Float?
  totalCash           Float?
  totalCashWithdrawal Float?
  totalCredit         Float?
  totalEncargo        Float?
  totalOtros          Float?           @default(0)
  totalPlanchado      Float?
  totalIncome         Float?
  pettyCashBalance    Float?
  user                User             @relation(fields: [fk_user], references: [id_user], onDelete: Cascade, onUpdate: Cascade)
  cashWithdrawal      CashWithdrawal[]
  payment             Payment[]
}

model CashWithdrawal {
  id_cashWithdrawal  Int                @id @default(autoincrement())
  fk_cashCut         Int
  fk_user            Int
  cashWithdrawalType CashWithdrawalType @default(withdrawal)
  amount             Float
  cause              String
  serviceOrder       Int?
  date               DateTime?          @db.Date
  created            DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  cashCut            CashCut            @relation(fields: [fk_cashCut], references: [id_cashCut], onDelete: Cascade, onUpdate: Cascade)
  user               User               @relation(fields: [fk_user], references: [id_user], onDelete: Cascade, onUpdate: Cascade)
}

model PettyCash {
  id_movement   Int           @id @default(autoincrement())
  pettyCashType PettyCashType @default(withdrawal)
  amount        Float
  balance       Float
  cause         String
  movementDate  DateTime      @db.Date
  created       DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  fk_user       Int?
  user          User?         @relation(fields: [fk_user], references: [id_user], onDelete: SetNull, onUpdate: Cascade)
}

enum Role {
  admin
  employee
}

enum MachineType {
  lavadora
  secadora
  plancha
}

enum Status {
  available
  unavailable
}

enum PayMethod {
  cash
  credit
}

enum PayForm {
  advance
  delivery
}

enum PayStatus {
  paid
  unpaid
}

enum OrderStatus {
  pending
  inProgress
  finished
  delivered
  stored
}

enum ServiceStatus {
  pending
  inProgress
  finished
}

enum CashCutStatus {
  open
  closed
}

enum CashWithdrawalType {
  withdrawal
  refound
}

enum PettyCashType {
  withdrawal
  deposit
}
