// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// FOR DOESN'T LOSE INFO OF THE DB USE 
// npx prisma db push

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// model UserType{
//   id_userType Int @id @default(autoincrement())
//   descripcion String
//   user User?
// }

enum Role {
  admin
  employee
}

model User {
  id_user        Int              @id @default(autoincrement())
  username       String           @unique
  name           String
  firstLN        String
  secondLN       String
  email          String           @unique
  phone          String
  pass           String
  role           Role             @default(employee)
  orders         Order[]
  payment        Payment[]
  deliveryDetail DeliveryDetail[]
  cashCut        CashCut[]
  created        DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Client {
  id_client Int     @id @default(autoincrement())
  username  String?
  name      String
  firstLN   String
  secondLN  String?
  email     String  @unique
  phone     String
  pass      String?
  orders    Order[]

  created   DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MachineType {
  lavadora
  secadora
}

enum Status {
  available
  unavailable
}

model Machine {
  id_machine  Int         @id @default(autoincrement())
  machineType MachineType @default(lavadora)
  model       String
  cicleTime   Int
  weight      Int
  status      Status      @default(available)
  notes       String

  created           DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  WashMachineDetail WashMachineDetail[]
  DryMachineDetail  DryMachineDetail[]
}

model Category {
  id_category         Int       @id @default(autoincrement())
  categoryDescription String
  service             Service[]
}

model Service {
  id_service  Int                  @id @default(autoincrement())
  description String
  fk_category Int                  @unique
  // Precio Unitario
  price       Float
  time        Int?
  weight      Int?
  pieces      Int?
  category    Category             @relation(fields: [fk_category], references: [id_category], onDelete: NoAction, onUpdate: Cascade)
  Orders      OrderServiceDetail[]

  created   DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PayMethod {
  cash
  credit
}

enum PayForm {
  advance
  delivery
}

enum PayStatus {
  paid
  unpaid
}

enum OrderStatus {
  pending
  inProgress
  finished
  delivered
}

model Order {
  id_order        Int                  @id @default(autoincrement())
  numberOfItems   Int                  @default(1)
  receptionDate   DateTime             @db.Date() 
  deliveryDate    DateTime             @db.Date()
  receptionTime   DateTime             @db.Time()
  deliveryTime    DateTime?            @db.Time()
  payForm         PayForm              @default(delivery)
  payStatus       PayStatus            @default(unpaid)
  orderStatus     OrderStatus          @default(pending)
  totalPrice      Float
  fk_client       Int
  fk_employee     Int
  client          Client               @relation(fields: [fk_client], references: [id_client], onDelete: NoAction)
  employee        User                 @relation(fields: [fk_employee], references: [id_user], onDelete: NoAction)
  deliveryDetails DeliveryDetail?
  payment         Payment?
  orderServices   OrderServiceDetail[]
  washMachine     WashMachineDetail[]
  dryMachine      DryMachineDetail[]

  created   DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderServiceDetail {
  fk_idService Int       @unique
  fk_idOrder   Int       @unique
  units        Int
  subtotal     Float
  finishDate   DateTime?
  token        Int?

  order     Order    @relation(fields: [fk_idOrder], references: [id_order], onDelete: NoAction, onUpdate: NoAction)
  service   Service  @relation(fields: [fk_idService], references: [id_service], onDelete: NoAction, onUpdate: NoAction)
  created   DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([fk_idOrder, fk_idService])
}

model WashMachineDetail {
  fk_idOrder     Int
  fk_idMachine   Int
  fk_staffMember Int
  washDate       DateTime?   @db.Date()
  washTime       DateTime?   @db.Time()
  order          Order       @relation(fields: [fk_idOrder], references: [id_order], onDelete: NoAction, onUpdate: NoAction)
  machine        Machine     @relation(fields: [fk_idMachine], references: [id_machine], onDelete: NoAction, onUpdate: NoAction)
  staffMember    StaffMember @relation(fields: [fk_staffMember], references: [id_staffMember], onDelete: NoAction, onUpdate: NoAction)
  created        DateTime    @default(now()) 
  updatedAt      DateTime    @updatedAt

  @@id([fk_idOrder, fk_idMachine])
}

model DryMachineDetail {
  fk_idOrder     Int
  fk_idMachine   Int
  fk_staffMember Int
  dryDate        DateTime?   @db.Date()
  dryTime        DateTime?   @db.Time()
  order          Order       @relation(fields: [fk_idOrder], references: [id_order], onDelete: NoAction, onUpdate: NoAction)
  machine        Machine     @relation(fields: [fk_idMachine], references: [id_machine], onDelete: NoAction, onUpdate: NoAction)
  staffMember    StaffMember @relation(fields: [fk_staffMember], references: [id_staffMember], onDelete: NoAction, onUpdate: NoAction)

  created   DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([fk_idOrder, fk_idMachine])
}

model Payment {
  id_payment     Int       @id @default(autoincrement())
  fk_idOrder     Int       @unique
  fk_userCashier Int
  payTotal       Float
  payMethod      PayMethod
  payDate        DateTime  @db.Date()
  payTime        DateTime  @db.Time()
  fk_cashCut     Int?

  created   DateTime @default(now())
  updatedAt DateTime @updatedAt

  order   Order    @relation(fields: [fk_idOrder], references: [id_order], onDelete: NoAction, onUpdate: NoAction)
  user    User     @relation(fields: [fk_userCashier], references: [id_user], onDelete: NoAction, onUpdate: NoAction)
  cashCut CashCut? @relation(fields: [fk_cashCut], references: [id_chashCut], onDelete: NoAction, onUpdate: NoAction)
}

model DeliveryDetail {
  id_delivery    Int      @id @default(autoincrement())
  fk_idOrder     Int      @unique
  fk_userCashier Int
  deliveryDate   DateTime @db.Date()
  deliveryTime   DateTime @db.Time()

  created   DateTime @default(now())
  updatedAt DateTime @updatedAt

  order Order @relation(fields: [fk_idOrder], references: [id_order], onDelete: NoAction, onUpdate: NoAction)
  user  User  @relation(fields: [fk_userCashier], references: [id_user], onDelete: NoAction, onUpdate: NoAction)
}

model StaffMember {
  id_staffMember Int    @id @default(autoincrement())
  name           String
  idToken        Int?
  email          String @unique
  phone          String

  created   DateTime @default(now())
  updatedAt DateTime @updatedAt

  washMachineDetail WashMachineDetail[]
  dryMachineDetail  DryMachineDetail[]
}

model CashCut {
  id_chashCut    Int       @id @default(autoincrement())
  fk_user        Int
  subtotal       Float?
  total          Float?
  subtotal_item1 Float?
  subtotal_item2 Float?
  subtotal_item3 Float?
  subtotal_item4 Float?
  subtotal_item5 Float?
  cashCutDate    DateTime  @db.Date()
  cashCutTime    DateTime  @db.Time()
  payment        Payment[]

  created   DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [fk_user], references: [id_user], onDelete: NoAction, onUpdate: NoAction)
}
