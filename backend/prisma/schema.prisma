generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id_user         Int               @id @default(autoincrement())
  name            String
  email           String            @unique
  phone           String            @unique
  pass            String
  role            Role              @default(employee)
  created         DateTime          @default(now())
  firstLN         String
  secondLN        String
  username        String            @unique
  updatedAt       DateTime          @updatedAt
  CashCut         CashCut[]
  CashWhithdrawal CashWhithdrawal[]
  DeliveryDetail  DeliveryDetail[]
  ServiceOrders   ServiceOrder[]
}

model Client {
  id_client     Int            @id @default(autoincrement())
  name          String
  email         String         @unique
  phone         String         @unique
  pass          String?
  created       DateTime       @default(now())
  firstLN       String
  secondLN      String?
  username      String         @unique
  updatedAt     DateTime       @updatedAt
  ServiceOrders ServiceOrder[]
}

model Machine {
  id_machine           Int                    @id @default(autoincrement())
  machineType          MachineType            @default(lavadora)
  model                String
  cicleTime            Int
  weight               Int
  status               Status                 @default(available)
  freeForUse           Boolean                @default(true)
  notes                String
  created              DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  serialNumber         String                 @default("N/A")
  LaundryWashQueue     LaundryWashQueue[]
  LaundryDryQueue      LaundryDryQueue[]
  SelfServiceWashQueue SelfServiceWashQueue[]
  SelfServiceDryQueue  SelfServiceDryQueue[]
}

model IronStation {
  id_ironStation Int         @id @default(autoincrement())
  machineType    MachineType @default(plancha)
  freeForUse     Boolean     @default(true)
  status         Status      @default(available)
  pieces         Int?
  notes          String
  serialNumber   String      @default("N/A")

  created   DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  IronQueue IronQueue[]
}

model Category {
  id_category         Int            @id @default(autoincrement())
  categoryDescription String         @unique
  serviceOrders       ServiceOrder[]
  services            Service[]
}

model Service {
  id_service         Int                  @id @default(autoincrement())
  description        String               @unique
  price              Float
  created            DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  category_id        Int
  Category           Category             @relation(fields: [category_id], references: [id_category])
  WashService        WashService[]
  DryService         DryService[]
  IronService        IronService[]
  ServiceOrderDetail ServiceOrderDetail[]
}

model WashService {
  id_washService       Int                    @id @default(autoincrement())
  fk_idService         Int
  machineType          MachineType            @default(lavadora)
  weight               Int
  cycleTime            Int
  service              Service                @relation(fields: [fk_idService], references: [id_service])
  LaundryWashQueue     LaundryWashQueue[]
  SelfServiceWashQueue SelfServiceWashQueue[]
}

model DryService {
  id_dryService       Int                   @id @default(autoincrement())
  fk_idService        Int
  machineType         MachineType           @default(secadora)
  weight              Int
  cycleTime           Int
  service             Service               @relation(fields: [fk_idService], references: [id_service])
  LaundryDryQueue     LaundryDryQueue[]
  SelfServiceDryQueue SelfServiceDryQueue[]
}

model IronService {
  id_ironService Int         @id @default(autoincrement())
  fk_idService   Int
  machineType    MachineType @default(plancha)
  pieces         Int
  cycleTime      Int
  service        Service     @relation(fields: [fk_idService], references: [id_service])
  IronQueue      IronQueue[]
}

model ServiceOrder {
  id_order              Int                    @id @default(autoincrement())
  receptionDate         DateTime               @db.Date
  orderStatus           OrderStatus            @default(pending)
  totalPrice            Float
  fk_client             Int
  created               DateTime               @default(now())
  numberOfItems         Int                    @default(1)
  payForm               PayForm                @default(delivery)
  payStatus             PayStatus              @default(unpaid)
  receptionTime         DateTime               @db.Time(0)
  updatedAt             DateTime               @updatedAt
  fk_user               Int
  scheduledDeliveryDate DateTime               @db.Date
  scheduledDeliveryTime DateTime?              @db.Time(0)
  fk_categoryId         Int
  fk_deliveryDetail     Int?
  category              Category               @relation(fields: [fk_categoryId], references: [id_category])
  client                Client                 @relation(fields: [fk_client], references: [id_client])
  user                  User                   @relation(fields: [fk_user], references: [id_user])
  deliveryDetail        DeliveryDetail?
  payment               Payment?
  token                 Int?
  ServiceOrderDetail    ServiceOrderDetail[]
  LaundryWashQueue      LaundryWashQueue[]
  SelfServiceWashQueue  SelfServiceWashQueue[]
  LaundryDryQueue       LaundryDryQueue[]
  SelfServiceDryQueue   SelfServiceDryQueue[]
  IronQueue             IronQueue[]
}

model ServiceOrderDetail {
  id_serviceOrderDetail Int      @id @default(autoincrement())
  units                 Int      @default(1)
  subtotal              Float    @default(0.00)
  created               DateTime @default(now())
  updatedAt             DateTime @updatedAt
  fk_ServiceOrder       Int
  fk_Service            Int

  seviceOrder ServiceOrder @relation(fields: [fk_ServiceOrder], references: [id_order])
  service     Service      @relation(fields: [fk_Service], references: [id_service])
}

model LaundryWashQueue {
  id_washEvent      Int     @id @default(autoincrement())
  fk_idWashService  Int
  fk_idServiceOrder Int
  fk_idStaffMember  Int?
  fk_idMachine      Int?
  isDone            Boolean @default(false)

  machine      Machine?     @relation(fields: [fk_idMachine], references: [id_machine])
  serviceOrder ServiceOrder @relation(fields: [fk_idServiceOrder], references: [id_order])
  staffMember  StaffMember? @relation(fields: [fk_idStaffMember], references: [id_staffMember])
  washService  WashService  @relation(fields: [fk_idWashService], references: [id_washService])
}

model SelfServiceWashQueue {
  id_washEvent      Int     @id @default(autoincrement())
  fk_idWashService  Int
  fk_idServiceOrder Int
  fk_idMachine      Int?
  isDone            Boolean @default(false)

  machine      Machine?     @relation(fields: [fk_idMachine], references: [id_machine])
  serviceOrder ServiceOrder @relation(fields: [fk_idServiceOrder], references: [id_order])
  washService  WashService  @relation(fields: [fk_idWashService], references: [id_washService])
}

model LaundryDryQueue {
  id_dryEvent       Int     @id @default(autoincrement())
  fk_idDryService   Int
  fk_idServiceOrder Int
  fk_idStaffMember  Int?
  fk_idMachine      Int?
  isDone            Boolean @default(false)

  machine      Machine?     @relation(fields: [fk_idMachine], references: [id_machine])
  serviceOrder ServiceOrder @relation(fields: [fk_idServiceOrder], references: [id_order])
  staffMember  StaffMember? @relation(fields: [fk_idStaffMember], references: [id_staffMember])
  dryService   DryService   @relation(fields: [fk_idDryService], references: [id_dryService])
}

model SelfServiceDryQueue {
  id_dryEvent       Int     @id @default(autoincrement())
  fk_idDryService   Int
  fk_idServiceOrder Int
  fk_idMachine      Int?
  isDone            Boolean @default(false)

  machine      Machine?     @relation(fields: [fk_idMachine], references: [id_machine])
  serviceOrder ServiceOrder @relation(fields: [fk_idServiceOrder], references: [id_order])
  dryService   DryService   @relation(fields: [fk_idDryService], references: [id_dryService])
}

model IronQueue {
  id_ironEvent      Int     @id @default(autoincrement())
  fk_idIronService  Int
  fk_idServiceOrder Int
  fk_idStaffMember  Int?
  fk_idIronStation  Int?
  isDone            Boolean @default(false)

  ironStation  IronStation? @relation(fields: [fk_idIronStation], references: [id_ironStation])
  serviceOrder ServiceOrder @relation(fields: [fk_idServiceOrder], references: [id_order])
  staffMember  StaffMember? @relation(fields: [fk_idStaffMember], references: [id_staffMember])
  ironService  IronService  @relation(fields: [fk_idIronService], references: [id_ironService])
}

model Payment {
  id_payment   Int             @id @default(autoincrement())
  fk_idOrder   Int             @unique
  payMethod    PayMethod
  payDate      DateTime        @db.Date
  created      DateTime        @default(now())
  fk_cashCut   Int
  payTime      DateTime        @db.Time(0)
  payTotal     Float
  updatedAt    DateTime        @updatedAt
  delivery     DeliveryDetail?
  cashCut      CashCut         @relation(fields: [fk_cashCut], references: [id_cashCut], onDelete: NoAction, onUpdate: NoAction)
  serviceOrder ServiceOrder    @relation(fields: [fk_idOrder], references: [id_order], onDelete: NoAction, onUpdate: NoAction)
}

model DeliveryDetail {
  id_delivery    Int          @id @default(autoincrement())
  fk_userCashier Int
  created        DateTime     @default(now())
  deliveryDate   DateTime     @db.Date
  deliveryTime   DateTime     @db.Time(0)
  updatedAt      DateTime     @updatedAt
  fk_idOrder     Int          @unique
  fk_idPayment   Int          @unique
  payment        Payment      @relation(fields: [fk_idPayment], references: [id_payment], onDelete: NoAction, onUpdate: NoAction)
  user           User         @relation(fields: [fk_userCashier], references: [id_user], onDelete: NoAction, onUpdate: NoAction)
  serviceOrder   ServiceOrder @relation(fields: [fk_idOrder], references: [id_order])
}

model StaffMember {
  id_staffMember   Int                @id @default(autoincrement())
  name             String
  email            String             @unique
  phone            String             @unique
  created          DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  firstLN          String
  id_Token         Int?
  secondLN         String
  LaundryWashQueue LaundryWashQueue[]
  LaundryDryQueue  LaundryDryQueue[]
  IronQueue        IronQueue[]
}

model CashCut {
  fk_user             Int
  total               Float?
  created             DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  cashCutD            DateTime?         @db.Date
  cashCutT            DateTime?         @db.Time(0)
  id_cashCut          Int               @id @default(autoincrement())
  cashCutStatus       CashCutStatus     @default(open)
  inicialCash         Float?            @default(0)
  ordersPayed         Int?
  toalAutoservicio    Float?
  totalCash           Float?
  totalCashWithdrawal Float?
  totalCredit         Float?
  totalEncargo        Float?
  totalOtros          Float?            @default(0)
  totalPlanchado      Float?
  totalIncome         Float?
  user                User              @relation(fields: [fk_user], references: [id_user], onDelete: NoAction, onUpdate: NoAction)
  cashWhithdrawal     CashWhithdrawal[]
  payment             Payment[]
}

model CashWhithdrawal {
  id_cashWhithdrawal  Int                @id @default(autoincrement())
  fk_cashCut          Int
  fk_user             Int
  cashWhithdrawalType CashWithdrawalType @default(withdrawal)
  amount              Float
  cause               String
  serviceOrder        Int?
  date                DateTime?          @db.Date
  created             DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  cashCut             CashCut            @relation(fields: [fk_cashCut], references: [id_cashCut], onDelete: NoAction, onUpdate: NoAction)
  user                User               @relation(fields: [fk_user], references: [id_user], onDelete: NoAction, onUpdate: NoAction)
}

enum Role {
  admin
  employee
}

enum MachineType {
  lavadora
  secadora
  plancha
}

enum Status {
  available
  unavailable
}

enum PayMethod {
  cash
  credit
}

enum PayForm {
  advance
  delivery
}

enum PayStatus {
  paid
  unpaid
}

enum OrderStatus {
  pending
  inProgress
  finished
  delivered
  stored
}

enum CashCutStatus {
  open
  closed
}

enum CashWithdrawalType {
  withdrawal
  refound
}
